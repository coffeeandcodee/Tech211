CONTINUE FROM THE CREATION OF Views/HelloWorld/Welcome.cshtml
The part where you paste in 
@{
    ViewData["Title"] = "Welcome";
}

<h2>Welcome</h2>

<ul>
    @for (int i = 0; i < (int)ViewData["NumTimes"]!; i++)
    {
        <li>@ViewData["Message"]</li>
    }
</ul>
----------------------------------------------------------------------------------

Modifying controller class to use Razor view files can cleanly encapsulate the process of generating HTML
responses to a client.

Razor-based view templates have a .cshtml file extension and provide an elegant way to create HTML output 
with C#

Updating Index():

 public IActionResult Index()
        {
            return View();
        }
Code calls the controller's View method and uses a view template to generate an HTML response.

Controller methods are referred to as action methods. Controller methods generally
return an IActionResult or a class derived rfrom ActionResult, and not a type like
string or int.

After altering and adding the .cshtml (Razor) file specified in tutorial, then visiting the url (in my case, 
https://localhost:7190/HelloWorld), it can be seen that the Index() method returned the approprate view as expected, with the message "Hello from our view template!". 
The "return View();" statement specified that the method should use a view template file to
render a response to the browser. 
The view template file name wasn't specified, so MVC defaulted to using the default view file.

The default view has the same name as the action method. In this instance, Index. 
The default page has menu links MvcMovie, Home, and Privacy, each with the same menu layout. This layout is implemented in Views/Shared/_layout.cshtml. Layout templates allow you to specify the HTML container layout of a site in one place. They also allow applying the HTML container layout across multiple pages in the site.

RenderBody is a placeholer where all the view-specific pages you create appear, WARPPED in the layout page.
e.g If you click the Privacy link and navigate to View/Home/Privacy.cshtml, view is rendered INSIDE the RenderBody method.

The Views/_ViewStart.cshtml file brings in the Views/Shared/_Layout.cshtml file to each view.

@{
    ViewData["Title"] = "Movie List";
}

<h2>My Movie List</h2>

<p>Hello from our View Template!</p>

//Got kinda confused here. Should revist

ViewData["Title"] = "Movie List"; in the code above sets the Title property of the 
ViewData dictionary to "Movie List".

Controller actions are invoked in response to an incoming URL request. A controller class
is where the code is written that handles incoming browser requests. It retrieves data from a data source and decides what type of response to return to the browser. 

View templates can be used from a controller to generate and format an HTML response to the browser.

Controllers are responsible for providing the data requried for view template to render a 
response. 

View templates SHOULD NOT do business logic or interact with database directly.

A view tempalte should work only with the data provided by the controller. This maintains 
seperation of concerns.
Seperation of concerns keeps code Clean, Testable, and Maintainable.

Rather than having the controller render this response as a string, we can change
the controller to use a view template.

The VIEW TEMPLATE GENERATES A DYNAMIC RESPONES.
This means that appropriate data must be passed from the controller to the 
view to generate the response.

This can be achieved by having the controller put the dynamic data (parameters)
that the view template needs in a ViewData dictionary. The view template can then 
access the dynamic data.

The ViewData dictionary is a dynamic object. 
This means any type can be used.
The ViewData object has no defined properties until something is added.

The MVC model binding system automatically maps the named parameteres name and numTimes from the query string to the parameters in the method.





